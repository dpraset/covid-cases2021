# Before getting started, explore the GapMinder website to better understand
# the *original* source of the data (e.g., who calculated these estimates)
# Place a brief summary of the each data source here (e.g., 1 - 2 sentences
# per data source)
# [YOUR ANSWER HERE]
# Using the `read.csv` function, read the life_expectancy_years.csv file into
# a variable called `life_exp`. Make sure not to read strings as factors
life_exp <- read.csv("life_expectancy_years.csv", stringsAsFactors = FALSE)
# Write a function `get_col_mean()` that takes a column name and a data frame
# and returns the mean of that column. Make sure to properly handle NA values
# Hint: `mean()` takes in an argument called `na.rm`
get_col_mean <- function(col_name, df_name){
return(mean(df_name[, col_name], na.rm = TRUE))
}
# Create a list `col_means` that has the mean value of each column in the
# data frame (except the `Country` column). You should use your function above.
# Hint: Use an `*apply` function (lapply, sapply, etc.)
col_means <- list(lapply(get_col_mean(col_means, life_exp)))
# Create a variable `avg_diff` that is the difference in average country life
# expectancy between 1800 and 2018
# Create a column `life_exp$change` that is the change in life
# expectancy from 2000 to 2018. Increases in life expectancy should
# be *positive*
# Create a variable `most_improved` that is the *name* of the country
# with the largest gain in life expectancy. Make sure to filter NA values
# Hint: `max()` takes in an argument called `na.rm`
# Create a variable `num_small_gain` that has the *number* of countries
# whose life expectance has improved less than 1 year between 2000 and 2018
# Make sure to filter NA values
# Hint: Lookup `is.na()`
# Write a function `country_change()` that takes in a country's name,
# two years as numbers (not strings), and the `life_exp` data frame
# Parameters should be written *in the above order*
# It should return the phrase:
# "Between YEAR1 and YEAR2, the life expectancy in COUNTRY went DIRECTION by
# SOME_YEARS years".
# Make sure to properly indictate the DIRECTION as "up" or "down"
# Hint: Use an if/else statement to help compute DIRECTION
# Using your `country_change()` function, create a variable `sweden_change`
# that is the change in life expectancy from 1960 to 1990 in Sweden
# Write a function `compare_change()` that takes in two country names and your
# `life_exp` data frame as parameters, and returns a sentence that describes
# their change in life expectancy from 2000 to 2018 (the `change` column)
# For example, if you passed the values "China", and "Bolivia" to you function,
# It would return this:
# "The country with the bigger change in life expectancy was China (gain=6.9),
#  whose life expectancy grew by 0.6 years more than Bolivia's (gain=6.3)."
# Make sure to round your numbers to one digit (though only after calculations)
# Hint: Use an if/else statement to paste the countries in the correct order
# Using your `bigger_change()` function, create a variable `usa_or_france`
# that describes who had a larger gain in life expectancy (the U.S. or France)
# Write your `life_exp` data.frame to a new .csv file to your
# data/ directory with the filename `life_exp_with_change.csv`.
# Make sure not to write row names.
install.packages("nycflight13")
# Assignment 3: Using Data
#
# Before you get started:
# - Set your working directory to "source file location" using the Session menu
# - Run the following line of code to delete all variables in your workspace
#     (This will make it easier to test your script)
rm(list = ls())
### Built in R Data ###########################################################
# In this section, you'll work with the variable `Titanic`, a data set which is
# built into the R environment.
# This data set actually loads in a format called a *table*
# See https://cran.r-project.org/web/packages/data.table/data.table.pdf
# Use the `is.data.frame()` function to test if it is a table.
# Create a variable `titanic_df` by converting `Titanic` into a data frame;
# you can use the `data.frame()` function or `as.data.frame()`
# Hint: Be sure to **not** treat strings as factors!
titanic_df <- data.frame(Titanic, stringsAsFactors = FALSE)
# It's important to understand the _meaning_ of each column before analyzing it
# Using comments below, describe what information is stored in each column
# For categorical variables, list all possible values
# Class: The Class of each passenger that seperates them into different sections of wealth, or as a crewmate
# Sex: The gender of the passenger
# Age: The age of the passenger
# Survived: A Yes or No factor depensing if the passenger survived or not
# Freq: The frequency, or the number of passengers for each factor
# Create a variable `children` that is a data frame containing only the rows
# from `titanic_df` with information about children on the Titanic
# Hints:
# - Filter rows using a vector of boolean values (like vector filtering)
# - See chapter 10.2.3
children <- titanic_df[titanic_df$Age == "Child", ]
# Create a variable `num_children` that is the total number of children.
# Hint: Remember the `sum()` function!
num_children <- sum(children$Freq)
# Create a variable `most_lost` that is the *row* from `titanic_df` with the
# largest absolute number of losses (people who did not survive)
# You can use multiple lines of code if you find that helpful
# to create this variable
# Hint: Filter for those who did not survive, then look for the row
most_lost <- titanic_df[titanic_df$Survived == "No", ]
most_lost <- most_lost[12, ]
# Define a function called `survival_rate()` that takes in two arguments which
# must be in *the following order*:
# - a ticket class (e.g., "1st", "2nd"), and
# - the dataframe itself (it's good practice to explicitly pass in data frames)
#
# This function should return a sentence that states the *survival rate*
# (# survived / # in group) of adult men and "women and children" in that
# ticketing class.
# It should read (for example):
# >"Of Crew class, 87% of women and children survived and 22% of men survived."
#
# This is a complicated function! We recommend the following approach:
# - Filter for all rows representing the given ticketing class and save the
#   new data frame to a variable
# - Using this data frame, filter for all rows representing Adult Males
# - Find the total number of men and total number of male survivors to
#   calculate the survival rate
# - Likewise, use the data frame to filter for all Children and Adult Females
# - Perform the above calculation for this group as well
#
# Other approaches are also acceptable, please comment to explain what you do!
survival_rate <- function(ticket_class, df) {
# set df to the titanic dataframe, and get the class for each passenger
df <- titanic_df$Freq[titanic_df$Class == ticket_class]
# get total of men in df
men_total <- sum(df[c(3, 7)])
# get the men who survived
men_survived <- df[7]
# calculate percentage with no decimals
men_percentage <- paste0(round(men_survived /
men_total * 100, digits = 0), "%")
# get total of women and children in df
womenchildren_total <- sum(df[c(1, 2, 4, 5, 6, 8)])
# get num of women and children who survived
womenchildren_survived <- sum(df[c(5, 6, 8)])
# calculate percentage of women and children survived to total
womenchildren_percentage <- paste0(round(womenchildren_survived / womenchildren_total * 100, digits = 0), "%")
paste(
"Of", ticket_class, "class,", womenchildren_percentage,
"of women and children survived and", men_percentage, "of men survived."
)
}
# Create variables `first_survived`, `second_survived`, `third_survived` and
# `crew_survived` by passing each class and the `titanic_df` data frame
# to your `survival_rate` function
first_survived <- survival_rate("1st")
second_survived <- survival_rate("2nd")
third_survived <- survival_rate("3rd")
crew_survived <- survival_rate("Crew")
# What notable differences do you observe in the survival rates across classes?
# Note at least 2 observations.
# - 1st class has the highest survival rates compared to the other classes
# - 3rd class is an outlier for women compared to the other classes
# What notable differences do you observe in the survival rates between the
# women and children versus the men in each group?
# Note at least 2 observations.
# - Almost 90% of women and children survived in 2nd class,
# where less than 10% survived
# - Almost all women and children of first class, second class,
# and crew members had a higher survival rate than men
### Reading in Data ###########################################################
# In this section, you'll work with .csv data of life expectancy by country
# First, download the csv file of `Life Expectancy` data from GapMinder:
# https://www.gapminder.org/data/
# You should save the .csv file into your `data` directory
# Before getting started, explore the GapMinder website to better understand
# the *original* source of the data (e.g., who calculated these estimates)
# Place a brief summary of the each data source here (e.g., 1 - 2 sentences
# per data source)
# This data was collected by 3 different sources.
# The first source was collected by Mattias Lindgren, who
# collected data from 1800 - 1970.
# The second source was collected by IHME, who collected data
# from 1970 - 2016
# The third source was from the UN, collecting data from 2017 to the future.
# The UN used forecasts to determine the life_expectancy rate for the future.
# Using the `read.csv` function, read the life_expectancy_years.csv file into
# a variable called `life_exp`. Make sure not to read strings as factors
life_exp <- read.csv("data/life_expectancy_years.csv", stringsAsFactors = FALSE)
# Write a function `get_col_mean()` that takes a column name and a data frame
# and returns the mean of that column. Make sure to properly handle NA values
# Hint: `mean()` takes in an argument called `na.rm`
get_col_mean <- function(col_name, df_name) {
return(mean(df_name[, col_name], na.rm = TRUE))
}
# Create a list `col_means` that has the mean value of each column in the
# data frame (except the `Country` column). You should use your function above.
# Hint: Use an `*apply` function (lapply, sapply, etc.)
year <- life_exp[, -1]
col_means <- lapply(year, get_col_mean, life_exp)
# Create a variable `avg_diff` that is the difference in average country life
# expectancy between 1800 and 2018
avg_diff <- sum(life_exp$X2018 - life_exp$X1800, na.rm = TRUE)
# Create a column `life_exp$change` that is the change in life
# expectancy from 2000 to 2018. Increases in life expectancy should
# be *positive*
life_exp$change <- life_exp$X2018 - life_exp$X2000
# Create a variable `most_improved` that is the *name* of the country
# with the largest gain in life expectancy. Make sure to filter NA values
# Hint: `max()` takes in an argument called `na.rm`
most_improved <- max(life_exp[, 1], na.rm = TRUE)
# Create a variable `num_small_gain` that has the *number* of countries
# whose life expectance has improved less than 1 year between 2000 and 2018
# Make sure to filter NA values
# Hint: Lookup `is.na()`
num_small_gain <- nrow(is.na(as.data.frame(life_exp$country[life_exp$change < 1])))
# Write a function `country_change()` that takes in a country's name,
# two years as numbers (not strings), and the `life_exp` data frame
# Parameters should be written *in the above order*
# It should return the phrase:
# "Between YEAR1 and YEAR2, the life expectancy in COUNTRY went DIRECTION by
# SOME_YEARS years".
# Make sure to properly indictate the DIRECTION as "up" or "down"
# Hint: Use an if/else statement to help compute DIRECTION
country_change <- function(country_name, year1, year2, df) {
df <- life_exp
life_exp_up <- "Up"
life_exp_down <- "Down"
if (life_exp$year1[life_exp$country == country_name] < life_exp$year2[life_exp$country == country_name]) {
return(
"Between", year1, "and", year2, ", the life expectancy in",
country_name, "went", life_exp_up, "by", (year2 - year1), "years"
)
} else {
return(
"Between", year1, "and", year2, ", the life expectancy in",
country_name, "went", life_exp_down, "by", (year2 - year1), "years"
)
}
}
# Using your `country_change()` function, create a variable `sweden_change`
# that is the change in life expectancy from 1960 to 1990 in Sweden
swenden_change <- country_change("Sweden", "1960", "1990")
# Write a function `compare_change()` that takes in two country names and your
# `life_exp` data frame as parameters, and returns a sentence that describes
# their change in life expectancy from 2000 to 2018 (the `change` column)
# For example, if you passed the values "China", and "Bolivia" to you function,
# It would return this:
# "The country with the bigger change in life expectancy was China (gain=6.9),
#  whose life expectancy grew by 0.6 years more than Bolivia's (gain=6.3)."
# Make sure to round your numbers to one digit (though only after calculations)
# Hint: Use an if/else statement to paste the countries in the correct order
compare_changes <- function(cname1, cname2, df) {
df <- life_exp
country1 <- as.numeric(country_change(cname1))
country2 <- as.numeric(country_change(cname2))
bigger_num <- max(country1, country2)
smaller_num <- min(country1, country2)
if (country1 > country2) {
bigger_country <- cname1
smaller_country <- cname2
} else {
bigger_country <- cname2
smaller_country <- cname1
}
diff_country <- bigger_num - smaller_num
paste0(
"The country with the bigger change in life expectancy was",
bigger_country, " (gain=",
round(bigger_num, digits = 2), "), whose life expectancy grew by ",
round(diff_country, digits = 2),
" years more than ", smaller_country, "'s (gain=",
round(smaller_num, digits = 2), ")."
)
}
# Using your `bigger_change()` function, create a variable `usa_or_france`
# that describes who had a larger gain in life expectancy (the U.S. or France)
usa_or_france <- country_change("United States", "France")
# Write your `life_exp` data.frame to a new .csv file to your
# data/ directory with the filename `life_exp_with_change.csv`.
# Make sure not to write row names.
write.csv(life_exp, file = "data/life_exp_with_change.csv", row.names = FALSE)
# We provide this line to delete all variables in your workspace.
# This will make it easier to test your script.
rm(list = ls())
library(stringr)
library(dplyr)
library(dplyr)
#https://perso.telecom-paristech.fr/eagan/class/igr204/data/cereal.csv
url <- 'https://perso.telecom-paristech.fr/eagan/class/igr204/data/cereal.csv'
cereal <- read.csv(url, sep = ';')
cereal <- cereal[-1,]
sugar_vals_piped <- cereal %>%
select(name, sugars) %>%
mutate(sugars_num = as.numeric(sugars)) %>%
filter(sugars_num >= 0) %>%
arrange(sugars_num, name)
summary_piped <- sugar_vals_piped  %>%
summarize(avg_sugars = mean(sugars_num),
min_sugars = min(sugars_num),
max_sugars = max(sugars_num))
max_sugars <- max(sugars_num)
min_sugars <- min(sugars_num)
max_row_piped <- sugar_vals_piped %>%
filter(sugars_num == max(sugars_num)) %>%
pull(name)
min_row_piped <- sugar_vals_piped %>%
filter(sugars_num == min(sugars_num)) %>%
pull(name)
library(dplyr)
#https://perso.telecom-paristech.fr/eagan/class/igr204/data/cereal.csv
url <- 'https://perso.telecom-paristech.fr/eagan/class/igr204/data/cereal.csv'
cereal <- read.csv(url, sep = ';')
cereal <- cereal[-1,]
sugar_vals_piped <- cereal %>%
select(name, sugars) %>%
mutate(sugars_num = as.numeric(sugars)) %>%
filter(sugars_num >= 0) %>%
arrange(sugars_num, name)
summary_piped <- sugar_vals_piped  %>%
summarize(avg_sugars = mean(sugars_num),
min_sugars = min(sugars_num),
max_sugars = max(sugars_num))
max_sugars <- max(sugar_vals_piped$sugars_num)
min_sugars <- min(sugar_vals_piped$sugars_num)
max_row_piped <- sugar_vals_piped %>%
filter(sugars_num == max(sugars_num)) %>%
pull(name)
min_row_piped <- sugar_vals_piped %>%
filter(sugars_num == min(sugars_num)) %>%
pull(name)
install.packages(ggplot2)
install.packages("ggplot2")
library(ggplot2)
?midwest
df <- midwest
View(df)
geom_point(mapping = aes(x = percollege, y = percadultpoverty))
#scatter plot
ggplot(data = df)
geom_point(mapping = aes(x = percollege, y = percadultpoverty))
#scatter plot
ggplot(data = df) +
geom_point(mapping = aes(x = percollege, y = percadultpoverty))
#hexagonal binning
ggplot(data = df) +
geom_hex(mapping = aes(x = percollege, y = percadultpoverty))
#bar chart
ggplot(data = mpg) +
geom_bar(mapping = aes(x = hwy, fill = class))
#horizontal bar chart
ggplot(data = mpg) +
geom_bar(mapping = aes(x = hwy, fill = class)) +
coord_flip()
#pie chart
ggplot(data = mpg, aes(x = factor(1), fill = factory(cyl))) +
geom_bar(width = 1) +
coord_polar(theta = "y")
#pie chart
ggplot(data = mpg, aes(x = factor(1), fill = factor(cyl))) +
geom_bar(width = 1) +
coord_polar(theta = "y")
ggplot(data = midwest) +
geom_point(mapping = aes(x = percollege, y = percadultpoverty,
color = state))
ggplot(data = midwest) +
geom_point(mapping = aes(x = percollege, y = percadultpoverty,
color = state)) +
scale_x_reverse() +
scale_color_brewer(palette = "Set3")
# Facets - break plot into parts like dplyr group_by()
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~class)
library("plotly")
install.packages("plotly")
library("plotly")
#working with plotly
mpg_plot <- ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~class)
ggplotly(mpg_plot)
#Creating a plot in plotly
plot_ly(
data = iris,
x = ~Sepal.Width,
y = ~Petal.Width,
color = ~Species,
Type = "scatter",
Mode = "markers"
)
#Creating a plot in plotly
plot_ly(
data = iris,
x = ~Sepal.Width,
y = ~Petal.Width,
color = ~Species,
Type = "scatter",
Mode = "markers"
) %>%
layout(
title = "Iris Data Set Visualization",
xaxis = list(titel = "Sepal Width", ticksuffix = "cm"),
yaxis = list(titel = "Petal Width", ticksuffix = "cm")
)
#Creating a plot in plotly
plot_ly(
data = iris,
x = ~Sepal.Width,
y = ~Petal.Width,
color = ~Species,
Type = "scatter",
Mode = "markers"
) %>%
layout(
title = "Iris Data Set Visualization",
xaxis = list(title = "Sepal Width", ticksuffix = "cm"),
yaxis = list(title = "Petal Width", ticksuffix = "cm")
)
#Creating a plot in plotly
plot_ly(
data = iris,
x = ~Sepal.Width,
y = ~Petal.Width,
color = ~Species,
Type = "scatter",
Mode = "markers"
) %>%
layout(
title = "Iris Data Set Visualization",
xaxis = list(titel = "Sepal Width", ticksuffix = "cm"),
yaxis = list(titel = "Petal Width", ticksuffix = "cm")
)
#Creating a plot in plotly
plot_ly(
data = iris,
x = ~Sepal.Width,
y = ~Petal.Width,
color = ~Species,
Type = "scatter",
Mode = "markers"
) %>%
layout(
title = "Iris Data Set Visualization",
xaxis = list(title = "Sepal Width", ticksuffix = "cm"),
yaxis = list(title = "Petal Width", ticksuffix = "cm")
)
install.packages("leaflet")
library(leaflet)
knitr::opts_chunk$set(echo = TRUE)
---
title: "INFO201 R Markdown Demo"
author: "Daniel Prasetyo"
date: "8/9/2021"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
```{r, echo = FALSE, message=FALSE}
library(dplyr)
library(knitr)
source("info201_lecture11.R")
```
## This is a demo of R markdown to show how we can use it.
According to our analysis, the highest sugar value is `r max_sugars` g and the lowest sugar value is `r min_sugars` g.
The sugars with `r max_sugars` g of sugars are: `r max_row_piped`. Here is the summary information on sugars:
```{r, echo = FALSE}
kable(summary_piped)
```
### Here are all the cereals sorted by sugar content:
```{r, echo=FALSE}
kable(sugar_vals_piped)
```
# chart of all ages
library(dplyr)
library(ggplot2)
library(plotly)
# Read data file
# - For some reason, data/'.csv file' didn't work so I used direct route from computer
covid_df <- read.csv("data/Cases by Earliest Specimen Collection Date - County and Age.csv", stringsAsFactors = FALSE)
# Creates a dataframe of every age group
all_ages <- select(
covid_df,
Age.0.19,
Age.20.34,
Age.35.49,
Age.50.64,
Age.65.79,
Age.80.
)
# had to remove the 'UnknownAge' column because it was messing up the graph
# Gets x and y values for graph
# Get age group
age_groups <- colnames(all_ages, do.NULL = TRUE)
# Get sum for each age group
age_sums <- colSums(all_ages, na.rm = FALSE)
age_sums <- c(age_sums)
# Calculate percentages
age_percen <- paste0(round(100 * age_sums / sum(age_sums), 2), "%")
# Function that takes in dataset as a parameter and return graph of data
age_graph_fun <- function(all_ages) {
# Make all_ages df into new df with sums
all_ages <- data.frame(
Age_Groups = c(age_groups),
value = c(age_sums)
)
# Make pi chart for the sum of each age group
age_graph <- ggplot(all_ages, aes(x = "", y = value, fill = Age_Groups)) +
geom_bar(width = 1, stat = "identity", color = "white") +
# add a label to add percentages
geom_text(aes(label = age_percen), position = position_stack(vjust = 0.5)) +
coord_polar(theta = "y") +
theme_void() +
ggtitle("Percentage Summary of Covid-19 Cases Per Age Group") +
labs(fill = "Age Groups")
# Display the graph
age_graph
# Return it
return(age_graph)
}
setwd("C:/Users/mcdan/Desktop/Info 201/Final Project/final-project-group-7")
shiny::runApp()
runApp()
runApp()
runApp()
